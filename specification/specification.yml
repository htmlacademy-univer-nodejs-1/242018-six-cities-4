openapi: 3.1.0
info:
  title: API сервер для проекта «Шесть городов»
  description: |-
    REST API для платформы аренды жилья "Шесть городов".
    
    **Основные возможности:**
    * Управление предложениями по аренде жилья
    * Система пользователей с регистрацией и авторизацией
    * Комментарии и рейтинги предложений
    * Система избранного
    * Премиум предложения по городам
    
    **Поддерживаемые города:** Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT
  version: 2.0.0
  contact:
    name: API Support
    email: api-support@example.com
servers:
  - url: http://localhost:4000/api
    description: Development server
  - url: https://api.six-cities.com
    description: Production server
tags:
  - name: offers
    description: Действия с объявлениями.
  - name: comments
    description: Действия с комментариями.
  - name: users
    description: Действия с пользователем.
paths:
  /users/register:
    post:
      tags:
        - users
      summary: Регистрация пользователя
      description: Регистрирует нового пользователя.
      requestBody:
        description: Информация для создания нового пользователя.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createUser'
        required: true

      responses:
        '201':
          description: Пользователь зарегистрирован. Объект пользователя.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'

        '400':
          description: Некорректные данные запроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

        '409':
          description: Пользователь с таким email уже существует.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

  /users/login:
    post:
      tags:
        - users
      summary: Авторизация пользователя
      description: Авторизует пользователя на основе логина и пароля.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: keks@htmlacademy.ru

                password:
                  type: string
                  example: 12345678

              required:
                - email
                - password
      responses:
        '200':
          description: Успешная авторизация. Токен доступа.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                  user:
                    $ref: '#/components/schemas/user'
                required:
                  - token
                  - user
        '400':
          description: Некорректные данные запроса.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'
        '401':
          description: Неверный логин или пароль.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/error'

    get:
      tags:
        - users
      summary: Проверка состояния пользователя
      description: Проверяет авторизацию клиента по токену.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Пользователь авторизован.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '401':
          description: Пользователь не авторизован.

  /offers:
    get:
      tags:
        - offers
      summary: Получить список предложений
      description: Отправляет список предложений по аренде. По умолчанию сервис возвращает не больше 60 предложений по аренде. Можно указать нужное количество в параметре запроса.
      parameters:
        - name: limit
          in: query
          schema:
            type: integer
            minimum: 1
            maximum: 60
            default: 60
            example: 60
          description: Количество предложений для получения с сервера
        - name: city
          in: query
          schema:
            type: string
            enum: [Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf]
          description: Фильтр по городу
        - name: sortBy
          in: query
          schema:
            type: string
            enum: [price, rating, date]
            default: date
          description: Сортировка предложений
        - name: sortOrder
          in: query
          schema:
            type: string
            enum: [asc, desc]
            default: desc
          description: Порядок сортировки

      responses:
        '200':
          description: Список предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offer'
    post:
      tags:
        - offers
      summary: Создание предложения
      description: Создает новое предложения
      security:
        - bearerAuth: []

      requestBody:
        description: Информация для создания предложения
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOffer'
        required: true

      responses:
        '201':
          description: Предложение успешно создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        '400':
          description: Данные некоректны.
        '401':
          description: Создавать предложения могут только авторизованные пользователи.

  /offers/{offerId}:
    get:
      tags:
        - offers
      summary: Детальная информация по предложению.
      description: Предоставляет детальную информацию по одному предложению.
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
            example: 6329c3d6a04ab1061c6425ef
          description: Идентификатор предложения

      responses:
        '200':
          description: Предложение успешно найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'

        '404':
          description: Предложение не найдено

    patch:
      tags:
        - offers
      summary: Редактирование предложения
      description: Предоставляет возможность редактирования предложения
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
            example: 6329c3d6a04ab1061c6425ef
          description: Идентификатор предложения

      requestBody:
        description: Информация для редактирования предложения
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createOffer'
        required: true

      responses:
        '201':
          description: Предложение успешно обновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        '400':
          description: Неверные данные
        '401':
          description: Редактировать предложения могут только авторизованные пользователи.
        '404':
          description: Предложение не найдено

    delete:
      tags:
        - offers
      summary: Удаление предложения
      description: Предоставляет возможность удаления предложения.
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
            example: 6329c3d6a04ab1061c6425ef
          description: Идентификатор предложения

      responses:
        '204':
          description: Предложение успешно удалено
        '401':
          description: Удалять предложения могут только авторизованные пользователи.
        '404':
          description: Предложение не найдено

  /offers/{city}/premium:
    get:
      tags:
        - offers
      summary: Премиальные предложения для города
      description: Предоставляет список премиальных предложений для определённого города. Сервис возвращает не больше 3 предложений с флагом «Premium».

      parameters:
        - name: city
          in: path
          required: true
          schema:
            type: string
            enum: [Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf]
          description: Название города

      responses:
        '200':
          description: Список премиальных предложений для определённого города
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offer'

  /offers/favorites:
    get:
      tags:
        - offers
      summary: Избранные предложения
      description: Предоставляет список избранных предложений текущего пользователя
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Список избранных предложений
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/offer'
        '401':
          description: Избранные предложения доступны только авторизованным пользователям.

  /offers/{offerId}/favorite:
    post:
      tags:
        - offers
      summary: Добавить предложение в избранное
      description: Добавляет предложение в список избранных текущего пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор предложения
      responses:
        '201':
          description: Предложение успешно добавлено в избранное
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/offer'
        '401':
          description: Добавлять предложения в избранное могут только авторизованные пользователи.
        '404':
          description: Предложение не найдено

    delete:
      tags:
        - offers
      summary: Удалить предложение из избранного
      description: Удаляет предложение из списка избранных текущего пользователя
      security:
        - bearerAuth: []
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
          description: Идентификатор предложения
      responses:
        '204':
          description: Предложение удалено из избранного
        '401':
          description: Удалять предложения из избранного могут только авторизованные пользователи.
        '404':
          description: Предложение не найдено

  /comments/{offerId}:
    get:
      tags:
        - comments
      summary: Список комментариев для предложения
      description: Предоставляет список комментариев к предложению. Сервис всегда возвращает список из 50 (или меньше) последних комментариев.
      parameters:
        - name: offerId
          in: path
          required: true
          schema:
            type: string
            example: 6329c3d6a04ab1061c6425eo
          description: Идентификатор предложения, для которого запрашиваются комментарии

      responses:
        '200':
          description: Список комментариев
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/comment'
        '404':
          description: Предложение не найдено
    post:
      tags:
        - comments
      summary: Добавление комментария
      description: Предоставляет возможность добавления комментария к предложению
      security:
        - bearerAuth: []

      requestBody:
        description: Информация для создания нового комментария.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/createComment'
        required: true

      responses:
        '201':
          description: Новый комментарий успешно добавлен.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/comment'
        '401':
          description: Добавлять комментарии могут только авторизованные пользователи.
        '404':
          description: Предложение не найдено

components:
  schemas:
    error:
      type: object
      properties:
        error:
          type: string
          description: Сообщение об ошибке
          example: "Validation failed"
        message:
          type: string
          description: Детальное описание ошибки
          example: "Email is required"
        code:
          type: integer
          description: Код ошибки
          example: 400
      required:
        - error
        - message
        - code

    createUser:
      type: object
      properties:
        email:
          type: string
          format: email
          example: keks@htmlacademy.ru
          description: Электронная почта пользователя
        avatar:
          type: string
          format: uri
          example: https://example.com/avatars/image.jpg
          description: URL аватара пользователя
        name:
          type: string
          minLength: 1
          maxLength: 15
          example: Keks
          description: Имя пользователя
        type:
          type: string
          enum: [Base, Pro]
          example: Base
          description: Тип пользователя
        password:
          type: string
          minLength: 6
          maxLength: 12
          example: 123456
          description: Пароль пользователя
      required:
        - email
        - name
        - type
        - password

    user:
      type: object
      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea
          description: Уникальный идентификатор пользователя
        email:
          type: string
          format: email
          example: keks@htmlacademy.ru
          description: Электронная почта пользователя
        avatar:
          type: string
          format: uri
          example: https://example.com/avatars/image.jpg
          description: URL аватара пользователя
        name:
          type: string
          example: Keks
          description: Имя пользователя
        type:
          type: string
          enum: [Base, Pro]
          example: Base
          description: Тип пользователя
      required:
        - id
        - email
        - name
        - type

    createOffer:
      type: object
      properties:
        title:
          type: string
          minLength: 10
          maxLength: 100
          example: Big house in the center of the city
          description: Название предложения
        description:
          type: string
          minLength: 20
          maxLength: 1024
          example: Big house in the center of the city with all amenities
          description: Описание предложения
        image:
          type: string
          format: uri
          example: https://example.com/images/image.jpg
          description: URL главного изображения
        price:
          type: number
          minimum: 100
          maximum: 100000
          example: 180
          description: Цена за ночь в евро
        city:
          type: string
          enum: [Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf]
          example: Paris
          description: Город расположения
        images:
          type: array
          items:
            type: string
            format: uri
          minItems: 6
          maxItems: 6
          example: [
            "https://example.com/images/image1.jpg",
            "https://example.com/images/image2.jpg",
            "https://example.com/images/image3.jpg",
            "https://example.com/images/image4.jpg",
            "https://example.com/images/image5.jpg",
            "https://example.com/images/image6.jpg"
          ]
          description: Дополнительные изображения предложения
        isPremium:
          type: boolean
          example: true
          description: Премиум предложение
        type:
          type: string
          enum: [Apartment, House, Room, Hotel]
          example: Apartment
          description: Тип жилья
        roomCount:
          type: integer
          minimum: 1
          maximum: 8
          example: 2
          description: Количество комнат
        guestCount:
          type: integer
          minimum: 1
          maximum: 10
          example: 4
          description: Максимальное количество гостей
        amenities:
          type: array
          items:
            type: string
            enum: [
              Breakfast,
              Air conditioning,
              Laptop friendly workspace,
              Baby seat,
              Washer,
              Towels,
              Fridge
            ]
          example: [Breakfast, Washer]
          description: Удобства
        coordinates:
          type: object
          properties:
            latitude:
              type: number
              minimum: -90
              maximum: 90
              example: 50.4501
              description: Широта
            longitude:
              type: number
              minimum: -180
              maximum: 180
              example: 30.5234
              description: Долгота
          required:
            - latitude
            - longitude
          description: Координаты предложения
      required:
        - title
        - description
        - image
        - price
        - city
        - images
        - isPremium
        - type
        - roomCount
        - guestCount
        - amenities
        - coordinates

    offer:
      type: object
      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ea
          description: Уникальный идентификатор предложения
        title:
          type: string
          example: Big house in the center of the city
          description: Название предложения
        description:
          type: string
          example: Big house in the center of the city with all amenities
          description: Описание предложения
        postDate:
          type: string
          format: date-time
          example: 2025-05-29T20:44:46.553Z
          description: Дата создания предложения
        image:
          type: string
          format: uri
          example: https://example.com/images/image.jpg
          description: URL главного изображения
        images:
          type: array
          items:
            type: string
            format: uri
          example: [
            "https://example.com/images/image1.jpg",
            "https://example.com/images/image2.jpg"
          ]
          description: Дополнительные изображения
        city:
          type: string
          enum: [Paris, Cologne, Brussels, Amsterdam, Hamburg, Dusseldorf]
          example: Paris
          description: Город расположения
        isPremium:
          type: boolean
          example: true
          description: Премиум предложение
        isFavorite:
          type: boolean
          example: true
          description: В избранном у текущего пользователя
        type:
          type: string
          enum: [Apartment, House, Room, Hotel]
          example: Apartment
          description: Тип жилья
        guestCount:
          type: integer
          minimum: 1
          maximum: 10
          example: 4
          description: Максимальное количество гостей
        price:
          type: number
          minimum: 100
          maximum: 100000
          example: 180
          description: Цена за ночь в евро
        amenities:
          type: array
          items:
            type: string
            enum: [
              Breakfast,
              Air conditioning,
              Laptop friendly workspace,
              Baby seat,
              Washer,
              Towels,
              Fridge
            ]
          example: [Breakfast, Washer]
          description: Удобства
        user:
          $ref: "#/components/schemas/user"
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 3.8
          description: Средний рейтинг (от 1 до 5)
        roomCount:
          type: integer
          minimum: 1
          maximum: 8
          example: 2
          description: Количество комнат
        commentsCount:
          type: integer
          minimum: 0
          example: 1
          description: Количество комментариев
        coordinates:
          type: object
          properties:
            latitude:
              type: number
              minimum: -90
              maximum: 90
              example: 50.4501
              description: Широта
            longitude:
              type: number
              minimum: -180
              maximum: 180
              example: 30.5234
              description: Долгота
          required:
            - latitude
            - longitude
          description: Координаты предложения
      required:
        - id
        - title
        - description
        - postDate
        - image
        - images
        - city
        - isPremium
        - isFavorite
        - type
        - guestCount
        - price
        - amenities
        - user
        - rating
        - roomCount
        - commentsCount
        - coordinates

    createComment:
      type: object
      properties:
        text:
          type: string
          minLength: 5
          maxLength: 1024
          example: Everything is perfect
          description: Текст комментария
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 3.8
          description: Оценка (от 1 до 5)
      required:
        - text
        - rating

    comment:
      type: object
      properties:
        id:
          type: string
          example: 6329c3d6a04ab1061c6425ec
          description: Уникальный идентификатор комментария
        text:
          type: string
          minLength: 5
          maxLength: 1024
          example: Everything is perfect
          description: Текст комментария
        postDate:
          type: string
          format: date-time
          example: 2025-05-31T14:39:06.782Z
          description: Дата создания комментария
        rating:
          type: number
          minimum: 1
          maximum: 5
          example: 4.5
          description: Оценка (от 1 до 5)
        author:
          $ref: "#/components/schemas/user"
      required:
        - id
        - text
        - postDate
        - rating
        - author

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT